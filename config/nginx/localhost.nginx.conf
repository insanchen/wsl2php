user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 1024;
	# multi_accept on;
	# use epoll;
}

http {

	##
	# Basic Settings
	##

	# Override some buffer limitations, will prevent DDOS too.
	client_body_buffer_size 10K;
	client_header_buffer_size 1K;
	client_max_body_size 8M;
	large_client_header_buffers 2 1K;

	# send the client a "request timed out" if the body is not loaded by this time. Default 60.
	client_body_timeout 32;
	client_header_timeout 32;

	# Every 60 seconds server broadcasts Sync packets, so 90 is a conservative upper bound.
	keepalive_timeout 90; # default 65
	send_timeout 120; # default 60

	# Allow the server to close the connection after a client stops responding.
	# Frees up socket-associated memory.
	reset_timedout_connection on;

	# Open file descriptors.
	# Caches information about open FDs, freqently accessed files.
	open_file_cache max=200000 inactive=20s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors on;

	# Sendfile copies data between one FD and other from within the kernel.
	# More efficient than read() + write(), since the requires transferring
	# data to and from the user space.
	sendfile on;

	# Tcp_nopush causes nginx to attempt to send its HTTP response head in one
	# packet, instead of using partial frames. This is useful for prepending
	# headers before calling sendfile, or for throughput optimization.
	tcp_nopush on;

	# don't buffer data-sends (disable Nagle algorithm). Good for sending
	# frequent small bursts of data in real time.
	tcp_nodelay on;

	types_hash_max_size 2048;
	server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##
	ssl_session_timeout 1d;
	ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
	ssl_session_tickets off;
	# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
	# ssl_dhparam /path/to/dhparam;

	# intermediate configuration
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_prefer_server_ciphers off;

	# OCSP stapling
	ssl_stapling on;
	ssl_stapling_verify on;

	# verify chain of trust of OCSP response using Root CA and Intermediate certs
	# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

	# replace with the IP address of your resolver
	# resolver 127.0.0.1;

	add_header X-Frame-Options "SAMEORIGIN";
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Content-Type-Options "nosniff";
	charset utf-8;

	##
	# Logging Settings
	##

	access_log off;
	error_log /var/log/nginx/error.log crit;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "MSIE [1-6]\.";

	# Only allow proxy request with these headers to be gzipped.
	gzip_proxied expired no-cache no-store private auth;

	# Default is 6 (1<n<9), but 2 even 1 is enough. The higher it is, the more CPU cycles will be wasted.
	gzip_comp_level 2;
	gzip_min_length 500; # Default 20

	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;

	gzip_types
		# text/html is always compressed by HttpGzipModule
		text/css
		text/javascript
		text/xml
		text/plain
		text/x-component
		application/javascript
		application/x-javascript
		application/json
		application/xml
		application/rss+xml
		application/atom+xml
		application/vnd.ms-fontobject
		font/truetype
		font/opentype
		image/svg+xml;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}
